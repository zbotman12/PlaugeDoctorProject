<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_talk_guy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_movement();

hearRange = 400;
coneHeight = 300;
coneBaseHalf = 50;
hearThreshold = 0.05;
playerTouched = 0;
seesPlayer = 0;
hearsPlayer = 0;
turnTimer = 0;
alertnessThreshold = 0.5;
alertness = 0;
objectOfInterestX = x;
objectOfInterestY = y;

enum behaviorStates{
    standGuard,
    seek,
    patrol,
    engage
}
behaviorState = behaviorStates.standGuard;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(object_exists(obj_player)){

    //The Hearing
    if(point_distance(x,y,obj_player.x, obj_player.y) &lt;= hearRange){
        var distanceFromGuy = abs(point_distance(x,y,obj_player.x, obj_player.y) / hearRange);    
        if(obj_player.soundValue - distanceFromGuy &gt; hearThreshold)
        {
            if(hearsPlayer &lt; 1) hearsPlayer += 0.1;
        }else{
            if(hearsPlayer &gt; 0)hearsPlayer -= 0.05;
        }
    }else{
        if(hearsPlayer &gt; 0)hearsPlayer -= 0.05;
    }
    
    //Seeing
    if(rectangle_in_triangle(obj_player.bbox_left,
                             obj_player.bbox_top, 
                             obj_player.bbox_right, 
                             obj_player.bbox_bottom, 
                             x, 
                             y - 30, 
                             x + (-sign(image_xscale) * coneHeight), 
                             y + coneBaseHalf, 
                             x + (-sign(image_xscale) * coneHeight), 
                             y - coneBaseHalf)){
                             
            if(seesPlayer &lt; 1) seesPlayer += 0.1;
        }else{
            if(seesPlayer &gt; 0)seesPlayer -= 0.05;
    
    //Touch
    if(place_meeting(x, y, obj_player)){
            if(playerTouched &lt; 1) playerTouched += 0.2;
        }else{
            if(playerTouched &gt; 0)playerTouched -= 0.05;
        }
    }
}

alertness = mean(seesPlayer, hearsPlayer, playerTouched); //Maybe not the best math model

switch(behaviorState){
    case behaviorStates.standGuard:{
    
    //Action
        left = false;
        right = false;
        jump = false;
    
        var odds = 50;
        if(irandom(odds) == odds &amp;&amp; turnTimer &lt;= 0){
            image_xscale *= -1;
            turnTimer = 90;
        }
        turnTimer--;
    //Transitions
        if(alertness &gt; alertnessThreshold){
            behaviorState = behaviorStates.seek;
            objectOfInterestX = obj_player.x;
            objectOfInterestY = obj_player.y;
        }
    }break;
    case behaviorStates.patrol:{
    
    
    }break;
    case behaviorStates.seek:{
    
     //Action
        if(x &lt; objectOfInterestX){
            left = false;
            right = true;
        }else if(x &gt; objectOfInterestX){
            left = true;
            right = false;
        }
        if(y &lt; objectOfInterestY){
        }else if(y &gt; objectOfInterestY){
        }
     //Transitions
     
     if((x &gt; objectOfInterestX - spd) &amp;&amp; (x &lt; objectOfInterestX + spd)){ //Did you get there fam
        if(alertness &lt;= 0){
            behaviorState = behaviorStates.standGuard;
            objectOfInterestX = x;
            objectOfInterestY = y;
        }else{
            objectOfInterestX = obj_player.x;
            objectOfInterestY = obj_player.y;
        }
     }
        
    }break;
    case behaviorStates.engage:{
    
    
    }break;
    default:{
        show_message("PANNICC");
    }
}

scr_motion(spd, jspd, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug){
    if(seesPlayer == 1) draw_set_color(c_red);
    draw_triangle(               x, 
                                 y - 30, 
                                 x + (-image_xscale * coneHeight), 
                                 y + coneBaseHalf, 
                                 x + (-image_xscale * coneHeight), 
                                 y - coneBaseHalf, 1);
    draw_set_color(c_white);
    if(playerTouched == 1) draw_set_color(c_red);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    draw_set_color(c_white);
    if(hearsPlayer == 1) draw_set_color(c_red);
    draw_circle(x, y, hearRange, true);
    draw_set_color(c_white);
    draw_text(x, y - 50, "see:" + string(seesPlayer))
    draw_text(x, y - 60, "hear:" + string(hearsPlayer))
    draw_text(x, y - 70, "feel:" + string(playerTouched))
    draw_text(x, y - 80, "state:" + string(behaviorState))
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
