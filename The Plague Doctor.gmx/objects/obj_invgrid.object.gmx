<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set size variables and create grid
kitSizeX = 35;
kitSizeY = 20;

invGrid = ds_grid_create(kitSizeX, kitSizeY);
InventoryCoordList = ds_list_create();

ds_grid_clear(invGrid, noone);
gridStartX = view_xview * global.display_scale + view_wview/2 - (kitSizeX * INV_CELL_SIZE)/2;
gridStartY = view_yview * global.display_scale + 25; //+ view_hview/2 - (kitSizeY * INV_CELL_SIZE)/2;

itemSelected = noone;

drawInvGUI = false;

/*List as a structure. each Item is 4 consecutive list elements like so:
*   1) Object ID 2) X position in grid 3) Y position in grid 4) instance ID
*/
ds_list_add(InventoryCoordList, obj_item_1, 0, 0, noone);
ds_list_add(InventoryCoordList, obj_item_2, 2, 2, noone);
ds_list_add(InventoryCoordList, obj_item_3, 6, 6, noone);

selectionBoxCellX = 0;
selectionBoxCellY = 0;
selectionBoxX = gridStartX + selectionBoxCellX * INV_CELL_SIZE;
selectionBoxY = gridStartY + selectionBoxCellY * INV_CELL_SIZE;

openInventory = false;

mouseLastX = 0;
mouseLastY = 0;
usingGamepad = false;

delayTimer = 0;
delayTime = 15;
scrolling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(invGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.gui_mouse_y != mouseLastY){
    usingGamepad = false;
}
if(global.gui_mouse_x != mouseLastX){
    usingGamepad = false;
}
if(press_any_button_gamepad()){
    usingGamepad = true;
}
mouseLastY = global.gui_mouse_y;
mouseLastX = global.gui_mouse_x;

if(openInventory){ //If player sends open inventory message
    drawInvGUI = true; //Time to draw the gui
    //Clear the grid and item selected
    ds_grid_clear(invGrid, noone);
    itemSelected = noone;
    
    //Spawn in all the items at there saved locations and save the instance id
    for(var item = 0; item &lt; ds_list_size(InventoryCoordList); item += 4){
        if(drawInvGUI){
            if(InventoryCoordList[| item + 3] == noone){
                InventoryCoordList[| item + 3] = spawn_gui_item(InventoryCoordList[| item + 1], InventoryCoordList[| item + 2], InventoryCoordList[| item]);
            }
        }
    }
    
    if(usingGamepad){
    //SelectionBox Controls
    
    var up = obj_player.arrowUp &amp;&amp; selectionBoxCellY &gt; 0
    var down = obj_player.arrowDown &amp;&amp; selectionBoxCellY &lt; (kitSizeY - 1);
    var left = obj_player.arrowLeft &amp;&amp; selectionBoxCellX &gt; 0;
    var right = obj_player.arrowRight &amp;&amp; selectionBoxCellX &lt; (kitSizeX - 1);
    var upleft = up &amp;&amp; left;
    var upright = up &amp;&amp; right;
    var downleft = down &amp;&amp; left;
    var downright = down &amp;&amp; right;
    
    if(!scrolling){
        if(upleft){
            if(delayTimer == 0){
                selectionBoxCellY--;
                selectionBoxCellX--;
            }
            delayTimer++;
        }else if(upright){ 
            if(delayTimer == 0){
                selectionBoxCellY--;
                selectionBoxCellX++;
            }
            delayTimer++;
        }else if(downleft){
            if(delayTimer == 0){
                selectionBoxCellY++;
                selectionBoxCellX--;
            }
            delayTimer++;
        }else if(downright){ 
            if(delayTimer == 0){
                selectionBoxCellY++;
                selectionBoxCellX++;
            }
            delayTimer++;
        }else if(up){
            if(delayTimer == 0){
                selectionBoxCellY--;
            }
            delayTimer++;
        }else if(down){
            if(delayTimer == 0){
                selectionBoxCellY++;
            }
            delayTimer++;
        }else if(left){
            if(delayTimer == 0){
                selectionBoxCellX--;
            }
            delayTimer++;
        }else if(right){
            if(delayTimer == 0){
                selectionBoxCellX++;
            }
            delayTimer++;
        }
        
        if(delayTimer == delayTime){
            scrolling = true;
        }
    }else{
        if(upleft){
            selectionBoxCellY--;
            selectionBoxCellX--;
        }else if(upright){ 
            selectionBoxCellY--;
            selectionBoxCellX++;
        }else if(downleft){
            selectionBoxCellY++;
            selectionBoxCellX--;
        }else if(downright){ 
            selectionBoxCellY++;
            selectionBoxCellX++;
        }else if(up){
            selectionBoxCellY--;
        }else if(down){
            selectionBoxCellY++;
        }else if(left){
            selectionBoxCellX--;
        }else if(right){
            selectionBoxCellX++;
        }
    }
    
    if(obj_player.arrowUpRelease || obj_player.arrowDownRelease || obj_player.arrowRightRelease || obj_player.arrowLeftRelease){
        scrolling = false;
        delayTimer = 0;
    }
    }else{
     var mouseGridY = floor((global.gui_mouse_y - gridStartY) / INV_CELL_SIZE);
     var mouseGridX = floor((global.gui_mouse_x - gridStartX) / INV_CELL_SIZE);
    
    if(mouseGridY &gt;= 0 &amp;&amp; mouseGridY &lt; (kitSizeY)){
        selectionBoxCellY = mouseGridY;
    }
    if( mouseGridX &gt;= 0 &amp;&amp; mouseGridX &lt; (kitSizeX)){
        selectionBoxCellX = mouseGridX;
    }
    }
    selectionBoxX = obj_invgrid.gridStartX + selectionBoxCellX * INV_CELL_SIZE;
    selectionBoxY = obj_invgrid.gridStartY + selectionBoxCellY * INV_CELL_SIZE;
    
    
//If openInventory is false, and we were drawing the gui last frame
}else if(drawInvGUI == true){
    drawInvGUI = false; //Stop drawing the gui
    //Clear the grid items
    ds_grid_clear(invGrid, noone);
    itemSelected = noone;
    //Destroy the items and clear the pointers to them in the list
    for(var item = 0; item &lt; ds_list_size(InventoryCoordList); item += 4){ 
        if(InventoryCoordList[| item + 3] != noone){
            with(InventoryCoordList[| item + 3]) instance_destroy();
            ds_list_replace(InventoryCoordList, item + 3, noone);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawInvGUI = false;
openInventory = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(application_surface);
if(drawInvGUI)
{
    for(var cellY = 0; cellY &lt; kitSizeY; cellY++)
    {
        for(var cellX = 0; cellX &lt; kitSizeX; cellX++)
        {
            draw_sprite_ext(spr_invslot, 0, gridStartX + cellX*INV_CELL_SIZE, gridStartY + cellY*INV_CELL_SIZE, 1, 1,0,c_white, 0.6);
            if(debug_mode)
            {
                draw_text(gridStartX + cellX*INV_CELL_SIZE,gridStartX + cellY*INV_CELL_SIZE, invGrid[# cellX, cellY]);
            }
        }
    }
    draw_set_alpha(0.8);
    draw_rectangle_color(selectionBoxX,
    selectionBoxY,
    selectionBoxX + INV_CELL_SIZE,
    selectionBoxY + INV_CELL_SIZE,
    c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    draw_text(0,0, "delayTimer = " + string(delayTimer));
    draw_text(0,10, "scrolling = " + string(scrolling));
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
