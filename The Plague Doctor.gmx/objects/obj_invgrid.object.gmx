<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set size variables and create grid
kitSizeX = 35;
kitSizeY = 20;
invGrid = noone;
InventoryInstanceList = ds_list_create();

//Declare Vars for the opened container
containerToOpen = noone;
containerGrid = noone;
containerSizeX = 0;
containerSizeY = 0;

//Starting locations to draw each grid
gridStartX = view_xview * global.display_scale + view_wview/2 - (kitSizeX * INV_CELL_SIZE)/2;
gridStartY = view_yview * global.display_scale + 25; //+ view_hview/2 - (kitSizeY * INV_CELL_SIZE)/2;
containerStartX = gridStartX;
containerStartY = gridStartY + (kitSizeY + 4) * INV_CELL_SIZE;

//Item movement vars
itemSelected = noone;
itemHovered = noone;
drawInvGUI = false;
openInventory = false;

//Selection Box variables
selectionBoxCellX = 0;
selectionBoxCellY = 0;
selectionBoxX = gridStartX + selectionBoxCellX * INV_CELL_SIZE;
selectionBoxY = gridStartY + selectionBoxCellY * INV_CELL_SIZE;
selectionBoxCurrentGrid = invGrid;
mouseGridY = 0;
mouseGridX = 0;
gridLowerBoundsX = 0;
gridLowerBoundsY = 0;
gridUpperBoundsX = 0;
gridUpperBoundsY = 0;
delayTimer = 0;
delayTime = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(openInventory){ //If player sends open inventory message
    if(containerToOpen != noone){
        containerGrid = containerToOpen.ContainerInventoryGrid;
        containerSizeX = ds_grid_width(containerGrid);
        containerSizeY = ds_grid_height(containerGrid);
        //Loop through the grid and get the instances of each item in it
        for(var cellY = 0; cellY &lt; containerSizeY; cellY++){
            for(var cellX = 0; cellX &lt; containerSizeX; cellX++){
                if(containerGrid[# cellX,cellY] != noone &amp;&amp; 
                    ds_list_find_index(InventoryInstanceList,containerGrid[# cellX,cellY]) == -1){
                    ds_list_add(InventoryInstanceList, containerGrid[# cellX,cellY]);
                }
            }
        }
    }

//SelectionBox Controls
    if(global.usingGamepad){
    
    if(selectionBoxCurrentGrid == invGrid){
        gridUpperBoundsX = kitSizeX;
        gridUpperBoundsY = kitSizeY;
        gridLowerBoundsX = 0;
        gridLowerBoundsY = 0;
    }else{
        gridUpperBoundsX = containerSizeX; 
        gridUpperBoundsY = containerSizeY;
        gridLowerBoundsX = 0;
        gridLowerBoundsY = 0;
    }
    
    
    var up = obj_player.arrowUp &amp;&amp; selectionBoxCellY &gt; gridLowerBoundsY - 1;
    var down = obj_player.arrowDown &amp;&amp; selectionBoxCellY &lt; (gridUpperBoundsY);
    var left = obj_player.arrowLeft &amp;&amp; selectionBoxCellX &gt; gridLowerBoundsX;
    var right = obj_player.arrowRight &amp;&amp; selectionBoxCellX &lt; (gridUpperBoundsX);
    var upleft = up &amp;&amp; left;
    var upright = up &amp;&amp; right;
    var downleft = down &amp;&amp; left;
    var downright = down &amp;&amp; right;
    
    if(!obj_player.runButton){
        if(upleft){
            if(delayTimer == 0){
                if(!check_grid_transition(-1)){
                    selectionBoxCellY--;
                    selectionBoxCellX--;
                }
            }
            delayTimer++;
        }else if(upright){ 
            if(delayTimer == 0){
                if(!check_grid_transition(-1)){
                    selectionBoxCellY--;
                    selectionBoxCellX++;
                }
            }
            delayTimer++;
        }else if(downleft){
            if(delayTimer == 0){
                if(!check_grid_transition(1)){
                    selectionBoxCellY++;
                    selectionBoxCellX--;
                }
            }
            delayTimer++;
        }else if(downright){ 
            if(delayTimer == 0){
                if(!check_grid_transition(1)){
                    selectionBoxCellY++;
                    selectionBoxCellX++;
                }
            }
            delayTimer++;
        }else if(up){
            if(delayTimer == 0){
                if(!check_grid_transition(-1)){
                    selectionBoxCellY--;
                }
            }
            delayTimer++;
        }else if(down){
            if(delayTimer == 0){
                if(!check_grid_transition(1)){
                    selectionBoxCellY++;
                }
            }
            delayTimer++;
        }else if(left){
            if(delayTimer == 0){
                selectionBoxCellX--;
            }
            delayTimer++;
        }else if(right){
            if(delayTimer == 0){
                selectionBoxCellX++;
            }
            delayTimer++;
        }
        
        if(delayTimer == delayTime){
            delayTimer = 0;
        }
    }else{
        if(upleft){
            if(!check_grid_transition(-1)){
                selectionBoxCellY--;
                selectionBoxCellX--;
            }
        }else if(upright){ 
            if(!check_grid_transition(-1)){
                selectionBoxCellY--;
                selectionBoxCellX++;
            }
        }else if(downleft){
            if(!check_grid_transition(1)){
                selectionBoxCellY++;
                selectionBoxCellX--;
            }
        }else if(downright){
            if(!check_grid_transition(1)){
                selectionBoxCellY++;
                selectionBoxCellX++;
            }
        }else if(up){
            if(!check_grid_transition(-1)){
                selectionBoxCellY--;
            }
        }else if(down){
            if(!check_grid_transition(1)){
                selectionBoxCellY++;
            }
        }else if(left){
            selectionBoxCellX--;
        }else if(right){
            selectionBoxCellX++;
        }
    }
    
        if(selectionBoxCellY &gt;= 0 &amp;&amp; selectionBoxCellY &lt; (gridUpperBoundsY)){
            selectionBoxCellY = selectionBoxCellY;
        }else if(selectionBoxCellY &gt;= 0){
            selectionBoxCellY = gridUpperBoundsY - 1; 
        }else{
            selectionBoxCellY = 0;
        }
        
        if( selectionBoxCellX &gt;= 0 &amp;&amp; selectionBoxCellX &lt; (gridUpperBoundsX)){
            selectionBoxCellX = selectionBoxCellX;
        }else if(mouseGridX &gt;= 0){
            selectionBoxCellX = gridUpperBoundsX - 1;
        }else{
            selectionBoxCellX = 0;
        }
    
    if(obj_player.arrowUpRelease || obj_player.arrowDownRelease || obj_player.arrowRightRelease || obj_player.arrowLeftRelease){
        delayTimer = 0;
    }
    
    }else{
        //MOUSE CONTROL CODE
        if(global.gui_mouse_y &gt; containerStartY - (2 * INV_CELL_SIZE)){
            selectionBoxCurrentGrid = containerGrid;
        }else{
            selectionBoxCurrentGrid = invGrid;
        }
        
        if(selectionBoxCurrentGrid == invGrid){
            gridLowerBoundsX = gridStartX;
            gridLowerBoundsY = gridStartY;
            gridUpperBoundsX = kitSizeX;
            gridUpperBoundsY = kitSizeY;
            selectionBoxCellY = kitSizeY - 1;
        }else{
            gridLowerBoundsX = containerStartX;
            gridLowerBoundsY = containerStartY;
            gridUpperBoundsX = containerSizeX;
            gridUpperBoundsY = containerSizeY;
            selectionBoxCellY = 0; 
        }
        
        mouseGridY = floor((global.gui_mouse_y - gridLowerBoundsY) / INV_CELL_SIZE);
        mouseGridX = floor((global.gui_mouse_x - gridLowerBoundsX) / INV_CELL_SIZE);
        
        if(mouseGridY &gt;= 0 &amp;&amp; mouseGridY &lt; (gridUpperBoundsY)){
            selectionBoxCellY = mouseGridY;
        }else if(mouseGridY &gt;= 0){
            selectionBoxCellY = gridUpperBoundsY - 1; 
        }else{
            selectionBoxCellY = 0;
        }
        if( mouseGridX &gt;= 0 &amp;&amp; mouseGridX &lt; (gridUpperBoundsX)){
            selectionBoxCellX = mouseGridX;
        }else if(mouseGridX &gt;= 0){
            selectionBoxCellX = gridUpperBoundsX - 1;
        }else{
            selectionBoxCellX = 0;
        }
    }
    
    if(selectionBoxCurrentGrid == invGrid){
        selectionBoxX = gridStartX + selectionBoxCellX * INV_CELL_SIZE;
        selectionBoxY = gridStartY + selectionBoxCellY * INV_CELL_SIZE;
    }else{
        selectionBoxX = containerStartX + selectionBoxCellX * INV_CELL_SIZE;
        selectionBoxY = containerStartY + selectionBoxCellY * INV_CELL_SIZE;
    }
    
   if((ds_exists(selectionBoxCurrentGrid, ds_type_grid)) &amp;&amp; (selectionBoxCurrentGrid[# selectionBoxCellX, selectionBoxCellY] != noone)){
        if(itemHovered != selectionBoxCurrentGrid[# selectionBoxCellX, selectionBoxCellY]){
            if(instance_exists(itemHovered)) itemHovered.hover = false;
            itemHovered = selectionBoxCurrentGrid[# selectionBoxCellX, selectionBoxCellY];
            itemHovered.hover = true;
        }
        if(obj_player.leftClick){
            itemSelected = itemHovered;
            itemSelected.trackMouse = true;
        }
    }else{
        if(instance_exists(itemHovered)) itemHovered.hover = false;
        itemHovered = noone;
    }
    
    if(obj_player.leftClickReleased &amp;&amp; itemSelected != noone){
        itemSelected.trackMouse = false;
        itemSelected.currentGrid = selectionBoxCurrentGrid;
        itemSelected.place = true;
    }
    drawInvGUI = true;
//If openInventory is false, and we were drawing the gui last frame
}else if(drawInvGUI == true){
    itemSelected = noone;
    //Destroy the items and clear the pointers to them in the instance list
    for(var item = 0; item &lt; ds_list_size(InventoryInstanceList); item++){ 
        if(InventoryInstanceList[| item] != noone &amp;&amp; instance_exists(InventoryInstanceList[| item])){
            with(InventoryInstanceList[| item]) instance_destroy();
        }
    }
    ds_list_clear(InventoryInstanceList);
    containerGrid = noone;
    drawInvGUI = false; //Stop drawing the gui
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawInvGUI = false;
openInventory = false;
itemSelected = noone;
//Destroy the items and clear the pointers to them in the instance list
for(var item = 0; item &lt; ds_list_size(InventoryInstanceList); item++){ 
    if(instance_exists(InventoryInstanceList[| item])){
        with(InventoryInstanceList[| item]) instance_destroy();
    }
}
ds_list_clear(InventoryInstanceList);
containerToOpen = noone;
containerGrid = noone;
containerSizeX = 0;
containerSizeY = 0;

var str = ds_grid_write(invGrid);
ini_open(global.containerRuntimefname);
ini_write_string("Inventories","PlayerInventory", str);
ini_write_real("Inventories","PlayerInventorySizeX", kitSizeX);
ini_write_real("Inventories","PlayerInventorySizeY", kitSizeY);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gridStr = "";
ini_open(global.containerRuntimefname);
if(!ini_key_exists("Inventories","PlayerInventory")){
    var emptyGrid = ds_grid_create(kitSizeX,kitSizeY);
    ds_grid_clear(emptyGrid, noone);
    var str = ds_grid_write(emptyGrid);
    ini_write_string("Inventories","PlayerInventory", str);
    ini_write_real("Inventories","PlayerInventory" + "sizeX", kitSizeX);
    ini_write_real("Inventories","PlayerInventory" + "sizeY", kitSizeY);
    show_message("WARNING: The Player's Inventory was unaccounted for in the runtime file. Initializing it to an empty, default kit.");
    ds_grid_destroy(emptyGrid);
}
kitSizeX = ini_read_real("Inventories","PlayerInventorysizeX",-1);
kitSizeY = ini_read_real("Inventories","PlayerInventorysizeY",-1);
gridStr = ini_read_string("Inventories","PlayerInventory","");
if(gridStr != "" &amp;&amp; kitSizeX != -1 &amp;&amp; kitSizeY != -1){
    invGrid = ds_grid_create(kitSizeX, kitSizeY);
    ds_grid_read(invGrid, gridStr);
}else{
    show_message("The player's inventory did not exist in the file.");
}
ini_close();

//Loop through the grid and get the instances of each item in it
for(var cellY = 0; cellY &lt; kitSizeY; cellY++){
    for(var cellX = 0; cellX &lt; kitSizeX; cellX++){
        if(invGrid[# cellX,cellY] != noone &amp;&amp; 
            ds_list_find_index(InventoryInstanceList,invGrid[# cellX,cellY]) == -1){
            ds_list_add(InventoryInstanceList, invGrid[# cellX,cellY]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(global.guiSurf);
if(drawInvGUI)
{
    for(var cellY = 0; cellY &lt; kitSizeY; cellY++)
    {
        for(var cellX = 0; cellX &lt; kitSizeX; cellX++)
        {
            draw_sprite_ext(spr_invslot, 0, gridStartX + cellX*INV_CELL_SIZE, gridStartY + cellY*INV_CELL_SIZE, 1, 1,0,c_white, 0.6);
            if(global.debug)
            {
                if(invGrid[# cellX, cellY] != noone){
                    draw_set_color(c_red);
                    draw_set_alpha(1);
                    draw_rectangle(gridStartX + cellX*INV_CELL_SIZE, 
                        gridStartY + cellY*INV_CELL_SIZE, 
                        gridStartX + cellX*INV_CELL_SIZE + INV_CELL_SIZE, 
                        gridStartY + cellY*INV_CELL_SIZE + INV_CELL_SIZE, 
                        true);
                }
            }
        }
    }
    
    if(containerToOpen != noone)
    {
        var gridSizeX = containerToOpen.containerSizeX;
        var gridSizeY = containerToOpen.containerSizeY;
        
        for(var cellY = 0; cellY &lt; gridSizeY; cellY++)
        {
            for(var cellX = 0; cellX &lt; gridSizeX; cellX++)
            {
                draw_sprite_ext(spr_invslot, 0, containerStartX + cellX*INV_CELL_SIZE, containerStartY + cellY*INV_CELL_SIZE, 1, 1,0,c_white, 0.6);
                if(global.debug)
                {
                    if(containerGrid[# cellX, cellY] != noone){
                        draw_set_color(c_red);
                        draw_set_alpha(1);
                        draw_rectangle(containerStartX + cellX*INV_CELL_SIZE,
                            containerStartY + cellY*INV_CELL_SIZE, 
                            containerStartX + cellX*INV_CELL_SIZE + INV_CELL_SIZE, 
                            containerStartY + cellY*INV_CELL_SIZE + INV_CELL_SIZE, 
                            true);
                    }
                }
            }
        }
    }
    if(global.debug)
    {
        draw_set_color(c_white);
        draw_text(0,30, "itemSelected = " + string(itemSelected));
        draw_text(0,40, "SelectionBox X = " + string(selectionBoxCellX) +  " SelectionBox Y = " + string(selectionBoxCellY) + " SelectionBox Grid = " + string(selectionBoxCurrentGrid));
        draw_text(0,50, "mouseGridX = " + string(mouseGridX) +  " mouseGridY = " + string(mouseGridY));
    }
    draw_set_alpha(0.8);
    draw_rectangle_color(selectionBoxX,
    selectionBoxY,
    selectionBoxX + INV_CELL_SIZE,
    selectionBoxY + INV_CELL_SIZE,
    c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
