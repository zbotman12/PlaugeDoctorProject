<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_testenemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
g = 0.2;
v_x = 0;
v_y = 0;
jumpspeed = 7;
movespeed = 2;
key_right = 0;
key_left = 0;
key_up = 0;
key_down = 0;
key_jump = 0;
follow = false;
Path = false;
pointX = x;
ReversePath = false;
pathIndex = 0;
debug_surf = surface_create(view_wview, view_hview);
sightConeAngle = 15;
defaultSightConeLength = 300;
sightConeLength = 0;
sightConeLengthBottom = 0;
sightConeLengthTop = 0;
sightConeVertexArray[0,0] = 0;
sightConeGrowthRate = 3;     
rayHitPointX = 0;
rayHitPointY = 0;
slopeScanValue = 15;
climbing = false;
grounded = false;
path = EnemyPath1;

playerLastSpottedCoord[0] = 0;
RoamValue = 40;

enum pidgeonStates{
    patrol,
    alert,
    kill,
    allclear
}
state = pidgeonStates.patrol;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_player_collision(obj_wall_parent);

if(sign(v_x) == 1)
{
image_xscale = -1 * abs(image_xscale);
}
else if(sign(v_x) == -1)
{
image_xscale = abs(image_xscale);
}

switch (state){
    case pidgeonStates.patrol:
    {
                                                            //Find the next point in the path based on current path direction
        if(!Path){
                Path = true;
                if(ReversePath) pathIndex-- else pathIndex++;
                pointX = path_get_point_x(path, pathIndex);
                pointY = path_get_point_y(path, pathIndex);
            }
        
        scr_enemy_move_to_point(pointX, pointY);

                                                            //If pointX is the last point, Turn around when destination reached
        if (pointX == path_get_point_x(path, path_get_number(path) - 1) || pointX == path_get_point_x(path, 0)){
            ReversePath = !ReversePath;
        }
                                                            //If character is within range of pointX, pick a new point.
        if((x &lt;= pointX + movespeed + 1 &amp;&amp; x &gt;= pointX - movespeed + 1)){
            Path = false;
        }

        var sightcone = scr_enemy_sightcone();
                                                            //If the player was found in the sightcone
        if( sightcone[0] != -1)
        {
            playerLastSpottedCoord = sightcone;             //save where the character saw him
            Path = false;
            pointX = playerLastSpottedCoord[0];
            state = pidgeonStates.alert;                    //Go into alert state
        }
    }break;
    
    case pidgeonStates.alert:
    {
        var RandomNumber = choose(-1,1,0);
        if(!Path){
            Path = true;
            //Roam to new point
            pointX = pointX + RandomNumber * RoamValue;
        }
        //Move toward player's last known location
        scr_enemy_move_to_point(pointX, pointY);
        
        if((x &lt;= pointX + movespeed + 1 &amp;&amp; x &gt;= pointX - movespeed + 1)){
            if(RandomNumber == 0){ //If we told him to stand still
                //wait and Look back and forth
            }else{
                Path = false; //find a new path
            }
        }
        
    }break;
    case pidgeonStates.kill:
    {
        //Kill the player
    
    }break;
    case pidgeonStates.allclear:
    {
        //Leave the room
    
    }break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(debug_mode){
    if(follow == true){
        draw_set_color(c_red);
    }else{
        draw_set_color(c_white);
    }
    draw_set_alpha(1);
    //draw_line(
    //    x,
    //    y,
    //    x + 100,
    //    y
    //);
    draw_triangle(    
        sightConeVertexArray[0,0],
        sightConeVertexArray[1,0],
        sightConeVertexArray[0,1],
        sightConeVertexArray[1,1],
        sightConeVertexArray[0,2],
        sightConeVertexArray[1,2], true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,74</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
