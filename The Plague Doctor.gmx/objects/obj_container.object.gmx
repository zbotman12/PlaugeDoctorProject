<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ContainerInventoryGrid = 0;
containerSizeX = 5;
containerSizeY = 5;
tempContainerSizeX = 5;
tempContainerSizeY = 5;
lastContainerSizeX = 5;
lastContainerSizeY = 5;
boxId = 0;
tempMax = 30;
openBoxEditor = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(openBoxEditor){
    var vertInc = keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up);
    var horInc = keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left);
    
    tempContainerSizeX += horInc;
    tempContainerSizeY += vertInc;

    tempContainerSizeX = clamp(tempContainerSizeX, 1, tempMax);
    tempContainerSizeY = clamp(tempContainerSizeY, 1, tempMax);
    
    if(lastContainerSizeX != tempContainerSizeX || lastContainerSizeY != tempContainerSizeY){
        ds_grid_resize(ContainerInventoryGrid, tempContainerSizeX, tempContainerSizeY);
        
        if(tempContainerSizeX &gt; containerSizeX){
            ds_grid_set_region(ContainerInventoryGrid, containerSizeX, 0, tempContainerSizeX, containerSizeY, noone);
        }else if(tempContainerSizeX &lt; containerSizeX){
            for(var cellX = tempContainerSizeX; cellX &lt; containerSizeX; cellX++){
                for(var cellY = 0; cellY &lt; containerSizeY; cellY++){
                    if(ContainerInventoryGrid[# cellX, cellY] != noone){
                        with(ContainerInventoryGrid[# cellX, cellY]) instance_destroy();
                        ContainerInventoryGrid[# cellX, cellY] = noone;
                    }
                }
            }
        }
        
        if(tempContainerSizeY &gt; containerSizeY){
            ds_grid_set_region(ContainerInventoryGrid, 0, containerSizeY, containerSizeX, tempContainerSizeY, noone);
        }else if(tempContainerSizeY &lt; containerSizeY){
            for(var cellY = tempContainerSizeY; cellY &lt; containerSizeY; cellY++){
                for(var cellX = 0; cellX &lt; containerSizeX; cellX++){
                    if(ContainerInventoryGrid[# cellX, cellY] != noone){
                        with(ContainerInventoryGrid[# cellX, cellY]) instance_destroy();
                        ContainerInventoryGrid[# cellX, cellY] = noone;
                    }
                }
            }
        }
        
        containerSizeX = tempContainerSizeX;
        containerSizeY = tempContainerSizeY;
        
        lastContainerSizeX = containerSizeX;
        lastContainerSizeY = containerSizeY;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(openBoxEditor){
    var gridStartX = (view_xview + view_wview / 2) * global.display_scale;
    var gridStartY = (view_yview + view_hview / 2) * global.display_scale;
    //surface_set_target(global.guiSurf);
    draw_text(gridStartX, gridStartY - 24, "Container Width : " + string(containerSizeX) + " cells");
    draw_text(gridStartX, gridStartY - 12, "Container Height : " + string(containerSizeY) + " cells");
    for(var cellY = 0; cellY &lt; containerSizeY; cellY++)
    {
        for(var cellX = 0; cellX &lt; containerSizeX; cellX++)
        {
            draw_sprite_ext(spr_invslot, 0, gridStartX + cellX*INV_CELL_SIZE, gridStartY + cellY*INV_CELL_SIZE, 1, 1,0,c_white, 0.6);
        }
    }
    //surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
