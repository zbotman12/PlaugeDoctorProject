<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_item_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>itemId = BANDAGE_ID;
trackMouse = false;
numCellsX = floor(sprite_width / INV_CELL_SIZE);
numCellsY = floor(sprite_height / INV_CELL_SIZE);
currentCellX = 0;
currentCellY = 0;
currentGrid = noone;
currentList = noone;
place = true;

hover = false;
width = sprite_width;
height = sprite_height;

display_x = 0;
display_y = 0;

gridX = 0;
gridY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (trackMouse){
    //Update the display location of the item to follow the mouse gui position
    display_x = obj_invgrid.selectionBoxX;
    display_y = obj_invgrid.selectionBoxY;
    //Clear the grid so that items can be placed where this item used to be.
    for(var cellY = currentCellY; cellY &lt;  currentCellY + numCellsY; cellY++){
        for(var cellX = currentCellX; cellX &lt; currentCellX + numCellsX; cellX++){
            if(currentGrid[# cellX,cellY] != noone) currentGrid[# cellX,cellY] = noone;
        }
    }
}else if(place){
    var GridStartX;
    var GridStartY;
    
    if(currentGrid == obj_invgrid.invGrid){
        GridStartX = obj_invgrid.gridStartX;
        GridStartY = obj_invgrid.gridStartY;
    }else{
        GridStartX = obj_invgrid.containerStartX;
        GridStartY = obj_invgrid.containerStartY;
    }
    
    //Calculate the which cell to put the top left corner of the item in
    var CellLocationX = floor((display_x - GridStartX)/INV_CELL_SIZE);
    var CellLocationY = floor((display_y - GridStartY)/INV_CELL_SIZE);
    
    //If we are outside the grid, do not place
    if((CellLocationX &lt; 0) || (CellLocationY &lt; 0) || (CellLocationX + numCellsX &gt; obj_invgrid.kitSizeX) || (CellLocationY + numCellsY &gt; obj_invgrid.kitSizeY)){
        trackMouse = true;
        exit;
    }
    
    //If the item would overlap another item, do not place.
    for(var cellY = CellLocationY; cellY &lt; CellLocationY + numCellsY; cellY++){
        for(var cellX = CellLocationX; cellX &lt; CellLocationX + numCellsX; cellX++){
            if(currentGrid[# cellX,cellY] != noone){
                trackMouse = true;
                exit;
            }
        }
    }
    
    //Fill the section of the grid that has the item in it with the instance id.
    for(var cellY = CellLocationY; cellY &lt; CellLocationY + numCellsY; cellY++){
        for(var cellX = CellLocationX; cellX &lt; CellLocationX + numCellsX; cellX++){
            currentGrid[# cellX,cellY] = id;
        }
    }
    
    //Update the current cell for the top left corner of the item
    currentCellX = CellLocationX;
    currentCellY = CellLocationY;
    //Update the display location of the item
    display_x = CellLocationX * INV_CELL_SIZE + GridStartX
    display_y = CellLocationY * INV_CELL_SIZE + GridStartY;
    
    //Clear the selected item and place.
    place = false;
    obj_invgrid.itemSelected = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(global.guiSurf);
draw_sprite(sprite_index, image_index, display_x, display_y);
if(hover){
    draw_set_alpha(0.8);
    draw_rectangle_color(display_x, display_y, display_x + width, display_y + height, c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
