<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_walking</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
dead = false;
grounded = true;
hidden = false;
crouched = false;
crawling = false;

image_speed = 2;
image_index = 0;

v_x = 0;
v_y = 0;
g = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-------------------------//
//-----PLAYER MOVEMENT-----//
//-------------------------//

// Right and left keys set velocities.
if (keyboard_check(vk_right)){

    crawling = false;
    running = false; // used for running sprite
    
    v_x = 3; 

    image_xscale = 1; // Flip sprite.
    
    //Shift increases speed.
    if (keyboard_check(vk_lshift) &amp;&amp; keyboard_check(vk_right)) {
    
         v_x = 10;
    
        if (grounded) { // for running sprite
        running = true;
       
        }
    }
    
  /**  if (keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_down)) {
        crawling = true;
        v_x = 1;       
    } */
}


if (keyboard_check(vk_left)) {
    
    crawling = false;
    running = false;
    
    v_x = -3;
    
    image_xscale = -1; // Flip sprite.
    
    // Shift increases speed.
    if (keyboard_check(vk_lshift) &amp;&amp; keyboard_check(vk_left)) {
    
        v_x = -10;
    
        if (grounded){
        running = true;
        
        }
    } 
    
  /**  if (keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_down)) {
        crawling = true;
        v_x = -1;
    } */
} 

// Set sprite to ducking sprite if down is pressed.
if (keyboard_check(vk_down)) {
    crouched = true; // used for crouching sprite and hiding
    v_x = 0; // Can't move while crouched.
} else {
    crouched = false;
}
    
// If left and right aren't pressed OR left and right are both pressed, v_x = 0.
if (!keyboard_check(vk_right) &amp;&amp; !keyboard_check (vk_left) 
    || keyboard_check (vk_right) &amp;&amp; keyboard_check (vk_left)) {
    v_x = 0;
    running = false;
}

// Jump mapped to space.
if (keyboard_check_pressed(vk_space) &amp;&amp; grounded == true) { // we don't want to spam jumps by holding space so use "pressed"
    v_y = -20;
}
    
// If one pixel above ground, v_y = 0. If space is pressed, jump.
if (place_meeting(x, y + 1, obj_wall)) {
    v_y = 0;
    grounded = true;
        if (keyboard_check_pressed(vk_space)) {
        v_y = -20;
        }
}
else { // Else, gravity pulls you down (falling is assumed).
    v_y += g;
    grounded = false; // Can't jump when not grounded.
}
  

//--------------------//
//-----COLLISIONS-----//
//--------------------//

// If on collision course with the wall...
if (place_meeting(x + v_x, y, obj_wall)) {

// While you haven't collided yet...
    while(!place_meeting(x + sign(v_x), y, obj_wall)) {
    
    // Move one pixel right or left.
    x += sign(v_x);
    }
    
    // When you collide, set v_x = 0.
    v_x = 0;
}
x += v_x; // Check for collisions first, then update x.

// If on collision course with the ground...
if (place_meeting(x, y + v_y, obj_wall)) {

// While you haven't collided yet...
    while(!place_meeting(x, y + sign(v_y), obj_wall)) {
    
    // Move one pixel up or down.
    y += sign(v_y);
    }
    
    // When you collide, set v_y = 0.
    v_y = 0;
}
y += v_y;


//------------------------------------//
//-----PLAYER OBJECT INTERACTIONS-----//
//------------------------------------//

if (grounded) { // must be on the ground to be hidden
    if (place_meeting(x, y, obj_crate) // if your colliding with the crate
         &amp;&amp; keyboard_check(vk_down)) { // and down is pressed
             hidden = true;
    }   
     else {
        hidden = false;
    }
}

//------------------------------------//
//-----SPRITE ANIMEATIONS YAY!!!!-----//
//------------------------------------//

if (grounded) { // sprites when grounded

    if (running &amp;&amp; !crouched) {
    
        /** if the sprite isn't the running sprite set index to zero so when 
          * it becomes the running sprite, it always starts on frame 0 */
        if (sprite_index != spr_running) {  
            image_index = 0;
        }
        
        sprite_index = spr_running;
        image_speed = 3;
        }
    
    else if (v_x != 0) { // if no horizontal speed
    
        if (sprite_index != spr_walking) { // same as before
            image_index = 0;
        }
        
        sprite_index = spr_walking;
        image_speed = 4;
     }
     
     else if (crouched) {
     
        if (sprite_index != spr_hide) {
            image_index = 0;
        }
        
        sprite_index = spr_hide; // script in animation end stops this sprite from looping
        image_speed = 2;
     }
     
    /** else if (crawling) {
             if (sprite_index != spr_crawl) {
                image_index = 0;
             }
        
        sprite_index = spr_crawl;
        image_speed = 2;
     } */
     
     else { // if none of the above, then make player idle.
        sprite_index = spr_idle;
        image_speed = 2;
     }
}

else { // if not grounded...

    if (v_y &gt;0) {
    
        if (sprite_index != spr_falling) {
            image_index = 0;
        }
        
    sprite_index = spr_falling; // this has a script in "animation end" to avoid looping
    image_speed = 0.5;
    }
    
    if (v_y &lt; 0) {
    
        sprite_index = spr_idle;
        image_speed  = 1;
    }
}


//------------------------------------//
//-----FOR TESTING THE GAME-----------//
//------------------------------------//

if (keyboard_check(vk_enter)) {
    room_restart();
}








    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_nextroom">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>-100</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_hide) { // if this sprite is active
    image_index = 14; // set frame speed to 0 at frame 19 (last frame)
    image_speed = 0;
    }

if (sprite_index == spr_falling) {
    image_index = 24;
    image_speed = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,74</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
