<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_walking</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
right = false;
left = false;
runningRight = false;
runningLeft = false;
grounded = true;
hidden = false;
grabbing = false;
runButton = false;

image_speed = 2;
image_index = 0;

v_x = 0;
v_y = 0;
g = 2;
friction = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-------------------------//
//-----PLAYER MOVEMENT-----//
//-------------------------//

// Right and left keys set velocities.
if (grounded) {
    if (right) {
  
        // only this speed if walking
        if (!runButton) {
            v_x = 3;
        }

        image_xscale = 1; // Flip sprite.
    
        //Shift eases into a running speed based on friction
        if (runButton) {
            if (v_x &lt; 10) {      
                v_x += friction/2;
            }
        }
    }

    if (left) {
    
        if (!runButton) {
            v_x = -3;
        }
        
        image_xscale = -1; // Flip sprite.

        // Shift increases speed.
        if (runButton) {
            if (v_x &gt; -10) {
                v_x -= friction/2;
            }
        }
    }
    
    if (right &amp;&amp; left) {
        v_x = 0;
    }
}

// movement booleans
if (keyboard_check(vk_right)) {
    right = true;
} else {
    right = false;
}

if (keyboard_check(vk_left)) {
    left = true;
} else {
    left = false;
}

if (keyboard_check(vk_lshift)) {
    runButton = true;
} else {
    runButton = false;
}


// easing out of a run with friction
if (grounded) {
    if (!right &amp;&amp; v_x &gt; 0) {
        v_x -= friction; // friction can be changed depending on floor tile
    }

    if (!left &amp;&amp; v_x &lt; 0) {
        v_x += friction;
    }
}
    
// If left and right aren't pressed OR left and right are both pressed, v_x = 0.
/*
if (!keyboard_check(vk_right) &amp;&amp; !keyboard_check (vk_left) 
    || keyboard_check (vk_right) &amp;&amp; keyboard_check (vk_left)) {
        v_x = 0;
        running = false;
} */

// Jump mapped to space.
if (keyboard_check_pressed(vk_space) &amp;&amp; grounded == true) { // we don't want to spam jumps by holding space so use "pressed"
    v_y = -20;
}
    
// If one pixel above ground, v_y = 0. If space is pressed, jump.
if (place_meeting(x, y + 1, obj_wall)) {
    v_y = 0;
    grounded = true;
        if (keyboard_check_pressed(vk_space)) {
        v_y = -20;
        }
}
else { // Else, gravity pulls you down (falling is assumed).
    v_y += g;
    grounded = false; // Can't jump when not grounded.
}
  

//--------------------//
//-----COLLISIONS-----//
//--------------------//

// If on collision course with the wall...
if (place_meeting(x + v_x, y, obj_wall)) {

    // the variable for the number of pixels "up" character can climb
    yplus = 0;  
    
    /* While there is a collision some x, y ahead and above of player.
     * Checks how many pixels in y direction there are until there is no collision.
     * Example: if there are 5 pixels in the y for collision, yplus = 5 and while loop breaks.
     * Eventually, yplus &gt; abs(some number). Therefore, abs(some number) states how many pixels
     * in the y direction the player can climb. 
     * Here, some number = 1 * v_x. Player can only go up inclines as much as his xVelocity.
     */
    while (place_meeting(x + v_x, y - yplus, obj_wall) &amp;&amp; yplus &lt;= abs(2 * v_x)) {
        yplus += 1;
    }
        
    // Uses new yplus, if there is a collision... (means one of the two conditions above returned false).   
    if (place_meeting(x + v_x, y - yplus, obj_wall)) {
    
        // While you haven't collided yet...
        while(!place_meeting(x + sign(v_x), y, obj_wall)) {
        
                // Move one pixel right or left.
                x += sign(v_x);
        }
        // When you collide, set v_x = 0.
        v_x = 0;
    }
    else {
        y -= yplus;
    }
}
x += v_x; // Check for collisions first, then update x.

// If on collision course with the ground...
if (place_meeting(x, y + v_y, obj_wall)) {

// While you haven't collided yet...
    while(!place_meeting(x, y + sign(v_y), obj_wall)) {
    
    // Move one pixel up or down.
        y += sign(v_y);
    }
    
    // When you collide, set v_y = 0.
    v_y = 0;
}
y += v_y;

/** Going down slopes */
    yminus = 0;
    while (!place_meeting(x + v_x, y + yminus, obj_wall) &amp;&amp; yminus &lt;= 10) {
        yminus += 1;
    }
    
    if (place_meeting(x + v_x, y + yminus, obj_wall)) {
        grounded = true;
        y += yminus;
    }
    else {
        grounded = false;
    }

//------------------------------------//
//-----PLAYER OBJECT INTERACTIONS-----//
//------------------------------------//

/****HIDING****/
if (grounded) { // must be on the ground to be hidden
    if (place_meeting(x, y, obj_crate) // if your colliding with the crate
         &amp;&amp; keyboard_check(vk_down)) { // and down is pressed
             hidden = true;
    }   
     else {
        hidden = false;
    }
}

/****GRABBING ON GRAB WALLS****/
if(place_meeting(x + 1, y, obj_grabBlock)) {
    if (keyboard_check(vk_control) &amp;&amp; !grounded) {
        grabbing = true;
    } else {
        grabbing = false;
    }
}

/* Same code but for the left side. 
 * Since sign(x) can return 0 it can't be used for grabs.
 */
 
if(place_meeting(x - 1, y, obj_grabBlock)) {
    if (keyboard_check(vk_control) &amp;&amp; !grounded) {
        grabbing = true;
    } else {
        grabbing = false;
    }
}

// if you're grabbing you can't go left, right, up or down.
if (grabbing) {
    v_y = 0;
    v_x = 0;
    grounded = true;
    x = xprevious;
    y = yprevious;
}

// resets grabbing if you're not holding grab
if (!keyboard_check(vk_control)) {
    grabbing = false;
}

    
/****LADDERS****/
/*
if(place_meeting(x, y, obj_ladder)) {
    if (keyboard_check(vk_up)) {
        g = -2;
    } else g = 2;
    if (keyboard_check(vk_down)) {
        g = 2;
    } else g = 2;
}
*/

//------------------------------------//
//-----SPRITE ANIMEATIONS YAY!!!!-----//
//------------------------------------//

if (grounded) { // sprites when grounded

    if (runButton &amp;&amp; (right || left)) {
    
        /** if the sprite isn't the running sprite set index to zero so when 
          * it becomes the running sprite, it always starts on frame 0 */
        if (sprite_index != spr_running) {  
            image_index = 0;
        }
        
        sprite_index = spr_running;
        image_speed = 3;
        }
    
    else if (left || right) { // if no horizontal speed
    
        if (sprite_index != spr_walking) { // same as before
            image_index = 0;
        }
        
        sprite_index = spr_walking;
        image_speed = 4;
     }
     
     else { // if none of the above, then make player idle.
        sprite_index = spr_idle;
        image_speed = 2;
     }
}

// if both direction keys pressed = idle and stationary
if (right &amp;&amp; left) {
    sprite_index = spr_idle;
    image_speed = 1;
}

else { // if not grounded...

    if (v_y &gt;0) {
        if (sprite_index != spr_falling) {
            image_index = 0;
        }
        
    sprite_index = spr_falling; // this has a script in "animation end" to avoid looping
    image_speed = 0.5;
    }
    
    if (v_y &lt; 0) {
        sprite_index = spr_idle;
        image_speed  = 1;
    }
}


//------------------------------------//
//-----FOR TESTING THE GAME-----------//
//------------------------------------//

if (keyboard_check(vk_enter)) {
    room_restart();
}







    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_nextroom">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>-100</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_hide) { // if this sprite is active
    image_index = 14; // set frame speed to 0 at frame 19 (last frame)
    image_speed = 0;
    }

if (sprite_index == spr_falling) {
    image_index = 24;
    image_speed = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,74</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
