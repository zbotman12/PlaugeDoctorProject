<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Buttons
right = false;
left = false;
up = false;
down = false;
upPressed = false;
downPressed = false;
rightAndLeftPressed = false;
runningRight = false;
runningLeft = false;
grounded = false;
hidden = false;
grabbing = false;
runButton = false;
climbing = false;
stairs = false;
click = false;
lastDir = 0;
jump = false;
gamepadHor = false;
gamepadVert = false;
//FACEBUTTONS 
gamepadAReleased = false;
gamepadAPressed = false;
gamepadBPressed = false;
gamepadXPressed = false;
gamepadYPressed = false;
gamepadA = false;
gamepadB = false;
gamepadX = false;
gamepadY = false;
//DPAD
gamepadDpadUpPressed = false;
gamepadDpadDownPressed = false;
gamepadDpadLeftPressed = false;
gamepadDpadRightPressed = false;
gamepadDpadUp = false;
gamepadDpadDown = false;
gamepadDpadLeft = false;
gamepadDpadRight = false;
gamepadStart = false;
gamepadLT = false;
//kinematics
gamespeed = 2;
/*KNOBS*/
spd = 6 / gamespeed;
runSpd = 15 / gamespeed;
hAccConst = 2 / gamespeed;
turnDelayTime = 3 * gamespeed;
runTurnDelayTime = 8 * gamespeed;
grav = 3 / gamespeed;
terminalVel = 30 / gamespeed;
jspd = 20 / gamespeed;
gravIgnoreTime = 12 * gamespeed;
baseGravIgnoreTime = 8 * gamespeed;
slideSpeed = 50 / gamespeed;
slideDecayAmmount = 4 / gamespeed;
ladderspd = 5 / gamespeed;
/*END KNOBS*/

hspd = 0;
vspd = 0;
gravIgnoreTimer = gravIgnoreTime;
jumped = false;
turnDelayTimer = 0;
lastkey = 0;
sliding = false;
slideDecay = false;

//spritestuff
image_speed = 2;
image_index = 0;

//doors
PressWPrompt = false;
lastRoom = room;
lastRoomX = 0;
lastRoomY = 0;
start_x = xstart;
start_y = ystart;
door = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player States
enum states{
    normal,
    hide,
    staircase,
    ladder,
    ledgegrab,
}

state = states.normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the inputs
get_input();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Controller

var running = runButton;
if(!sliding){
    if(right){
        image_xscale = abs(image_xscale);
    }else if (left){
        image_xscale = -abs(image_xscale);
    }
}

if (grounded)
{
    if(sliding)
    {
            mask_index = spr_crouch_mask;
            if (sprite_index != spr_slide)
            {  
                image_index = 0;
            }  
            sprite_index = spr_slide;
            image_speed = 3 / gamespeed;
        }
    else if ((right ^^ left &amp;&amp; crouchButton))
    {
            mask_index = spr_crouch_mask;
            if (sprite_index != spr_crawl)
            { 
                image_index = 0;
            }
            sprite_index = spr_crawl;
            image_speed = 1 / gamespeed;
    }
    else if (running &amp;&amp; (right ^^ left))//If running
    {
        /** if the sprite isn't the running sprite set index to zero so when 
          * it becomes the running sprite, it always starts on frame 0 */
            mask_index = spr_player_mask;
            if (sprite_index != spr_running)
            {  
                image_index = 0;
            }
            sprite_index = spr_running;
            image_speed = 3 / gamespeed;
    }
    else if ((right ^^ left)) //If not running
    { 
        // same as before
            mask_index = spr_player_mask;
            if (sprite_index != spr_walking) 
            { 
                image_index = 0;
            }
            sprite_index = spr_walking;
            image_speed = 4 / gamespeed;
    }
    else if(crouchButton)
    {  
            mask_index = spr_crouch_mask;
            sprite_index = spr_crouched_idle;
            image_speed = 1 / gamespeed;
    }
    else 
    { 
        // if idle.
            mask_index = spr_player_mask;
            sprite_index = spr_idle;
            image_speed = 1 / gamespeed;
        }
}
else 
{ 
    // if not grounded...
    if (!grounded) 
    {
            mask_index = spr_player_mask;
            if (sprite_index != spr_falling) 
            {
                image_index = 0;
            }
            sprite_index = spr_falling; // this has a script in "animation end" to avoid looping
            image_speed = 0.5 / gamespeed;
    }
    if (grounded) 
    {
            mask_index = spr_player_mask;
            sprite_index = spr_idle;
            image_speed  = 1 / gamespeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina Controller
/*if(runButton &amp;&amp; (right ^^ left))
{
    if(instance_exists(obj_guiManager))
    {
        if(obj_guiManager.mp &lt;= 1)
        {
            fatiqued = true;
        }
        else
        {
            obj_guiManager.mp -= 1;
        }
    }
}

if(obj_guiManager.mp &gt;= 5)
{
    fatiqued = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main State Machine

switch (state)
{
    case states.normal:{ 
        //Behavior
        scr_motion();
        
        //Transitions
        if((place_meeting(x,y - 1,obj_ladder_mask) &amp;&amp; up) || (place_meeting(x,y + 1,obj_ladder_mask) &amp;&amp; down) &amp;&amp; (place_meeting(x,y,obj_ladder_mask)) )
        {
            turnDelayTimer = 0;
            vspd = 0;
            hspd = 0;
            state = states.ladder;
        }
         
    }break;
    case states.staircase:{
    
    }break;
    case states.ladder:{
        //Behavior
        var ladderObj = instance_nearest(x,y, obj_ladder_mask);
        if(ladderObj != noone){
            x = ladderObj.x;
        }
        if(!(left ^^ right)){
            if(turnDelayTimer != 0){
                turnDelayTimer--;
            }else if(up &amp;&amp; !down){
                if(lastkey == "down"){
                    turnDelayTimer = turnDelayTime;
                }else{
                    vspd = -ladderspd;
                }
                lastkey = "up";
            }else if (down &amp;&amp; !up){
                if(lastkey =="up"){
                    turnDelayTimer = turnDelayTime;
                }else{
                    vspd = ladderspd;
                }
                lastkey = "down";
            }
        }
        
         if(!place_meeting(x, bbox_top + ladderspd, obj_ladder_mask) &amp;&amp; place_meeting(x, bbox_top, obj_ladder_mask)){
            //If your below the ladder
            if(vspd &gt; 0){
                vspd = 0;
            }
         }
         if(!place_meeting(x, bbox_bottom - ladderspd, obj_ladder_mask)){
            //If your above the ladder
            if(vspd &lt; 0){
                vspd = 0;
            }
         }
        
        if((!up &amp;&amp; !down) || (up &amp;&amp; down)){
            vspd = 0;
        }
        
        //Transitions
        if((jump)){
            vspd = -jspd;
            turnDelayTimer = 0;
            state = states.normal;
        }
        if( !up &amp;&amp; !down &amp;&amp; right &amp;&amp; !place_meeting(x + sprite_get_width(obj_ladder_mask) + 1,y, obj_collision_box) ){
            hspd = spd;
            turnDelayTimer = 0;
            state = states.normal;
        }else if(!up &amp;&amp; !down &amp;&amp; left &amp;&amp; !place_meeting(x - sprite_get_width(obj_ladder_mask) - 1,y, obj_collision_box)){
            hspd = -spd;
            turnDelayTimer = 0;
            state = states.normal;
        }
        
        if(place_meeting(x + hspd, y, obj_collision_box)){
            while(!place_meeting(x+sign(hspd), y, obj_collision_box)){
                x += sign(hspd);
            }
            hspd = 0;
            if(ladderObj != noone){
                x = ladderObj.x;
            }
        }
        
        x += hspd;
        
        if(place_meeting(x, y + vspd, obj_collision_box)){
            while(!place_meeting(x, y+sign(vspd), obj_collision_box)){
                y += sign(vspd);
            }
            vspd = 0;
        }
        
        y += vspd;
        
        
    }break;
    case states.ledgegrab:{
    
    }break;
    case states.hide:{
         
    }break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage Events
if(place_meeting(x,y,obj_firetrap))
{
    if(instance_exists(obj_guiManager)) obj_guiManager.hp -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door Code
if(place_meeting(x,y,obj_nextroom))
{
    door = instance_nearest(x, y, obj_nextroom);
    if(door != noone)
    {
        door.pressWprompt = true;
        
        if(keyboard_check_pressed(ord('W')))
        {
            lastRoom = room;
            lastRoomX = door.last_x;
            lastRoomY = door.last_y;
            start_x = door.new_x;
            start_y = door.new_y;
            door.pressWprompt = false;
            room_goto(door.next_room);
        }
    }
}
else
{
    if(door != noone &amp;&amp; instance_exists(door))
    {
        door.pressWprompt = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Controls

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Stuff
if (keyboard_check(vk_enter)) 
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blend Animations
if (sprite_index == spr_hide) 
{
    image_index = 14; // set frame speed to 0 at frame 19 (last frame)
    image_speed = 0; //Do not animate
}

if (sprite_index == spr_falling) 
{
    image_index = 24;
    image_speed = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reinitialize Player
sprite_index = spr_idle;
image_index = 0;
image_xscale = abs(image_xscale);
x = start_x;
y = start_y;
//grounded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and Draw Debug
draw_self();
if(debug_mode){
    draw_set_color(c_white);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
   draw_text(x + 10, y - 20, vspd);
    switch (state){
        case states.normal: draw_text(x + 10, y - 10, "STATE = normal"); break;
        case states.staircase: draw_text(x + 10, y - 10, "STATE = staircase"); break;
        case states.ladder: draw_text(x + 10, y - 10, "STATE = ladder"); break;
        case states.ledgegrab: draw_text(x + 10, y - 10, "STATE = ledgegrab"); break;
        case states.hide: draw_text(x + 10, y - 10, "STATE = hide"); break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
