<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
right = false;
left = false;
rightAndLeftPressed = false;
runningRight = false;
runningLeft = false;
grounded = true;
hidden = false;
grabbing = false;
runButton = false;

image_speed = 2;
image_index = 0;

maxWalkingSpeed = 3;
maxRunningSpeed = 10;
jumpingSpeed = 20;
slopeScanValue = 10;
fric = 0.5;

v_x = 0;
v_y = 0;
g = 2;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*-----------------------------------------------------------------------------------------
  ____  _        _ __   _______ ____    __  __  _____     _______ __  __ _____ _   _ _____ 
 |  _ \| |      / \\ \ / / ____|  _ \  |  \/  |/ _ \ \   / / ____|  \/  | ____| \ | |_   _|
 | |_) | |     / _ \\ V /|  _| | |_) | | |\/| | | | \ \ / /|  _| | |\/| |  _| |  \| | | |  
 |  __/| |___ / ___ \| | | |___|  _ &lt;  | |  | | |_| |\ V / | |___| |  | | |___| |\  | | |  
 |_|   |_____/_/   \_\_| |_____|_| \_\ |_|  |_|\___/  \_/  |_____|_|  |_|_____|_| \_| |_| 
  
-----------------------------------------------------------------------------------------*/


//------------------------------------------------WALKING, RUNNING, JUMPING, IDEL, AND FRICTION


// Right and left keys set velocities.
if (right &amp;&amp; !left) {

    // only this speed if walking
    if (!runButton) {
        v_x = maxWalkingSpeed;
    }

    image_xscale = 1; // Flip sprite.

    //Shift eases into a running speed based on fric
    if (runButton &amp;&amp; v_x &lt; maxRunningSpeed) {      
        // divided by two just makes it take longer to reach 10
        v_x += fric;
    }
}


if (left &amp;&amp; !right) {

    if (!runButton &amp;&amp; grounded) {
        v_x = -maxWalkingSpeed;
}
    
    image_xscale = -1; // Flip sprite.

    // Shift increases speed.

    if (runButton &amp;&amp; v_x &gt; -maxRunningSpeed) {
        v_x -= fric;
    }
}
    
    // jumping if grounded and space is pressed
if (keyboard_check_pressed(vk_space) &amp;&amp; grounded) {
    v_y = -jumpingSpeed;
}


//------------------------------------------------WALKING AND RUNNING BOOLEANS



// right
if (keyboard_check(vk_right)) {
    right = true;
} else {
    right = false;
}


// left
if (keyboard_check(vk_left)) {
    left = true;
} 
else {
    left = false;
}

// both pressed
if (keyboard_check(vk_right) 
    &amp;&amp; keyboard_check(vk_left)) {
        rightAndLeftPressed = true;
}
else {
    rightAndLeftPressed = false;
}

// run boolean
if (keyboard_check(vk_lshift)) {
    runButton = true;
} else {
    runButton = false;
}


//------------------------------------------------END OF WALK/RUN DECELERATION


if (grounded) {
    if (!right &amp;&amp; v_x &gt; 0) {
        v_x -= fric; // fric can be changed depending on floor tile
    }
    else if (!left &amp;&amp; v_x &lt; 0) {
        v_x += fric;
    }
    if (rightAndLeftPressed // pressing left and right don't cancel momentum
            &amp;&amp; v_x &gt; 0) {
                v_x -= fric;
                image_xscale = -1; // flip the sprite in motion's direction
    }
    else if (rightAndLeftPressed
            &amp;&amp; v_x &lt; 0) {
                v_x += fric;
                image_xscale = 1;
    }
}
 

/*----------------------------------------
   ____      _ _ _     _                 
  / ___|___ | | (_)___(_) ___  _ __  ___ 
 | |   / _ \| | | / __| |/ _ \| '_ \/ __|
 | |__| (_) | | | \__ \ | (_) | | | \__ \
  \____\___/|_|_|_|___/_|\___/|_| |_|___/

----------------------------------------*/


//------------------------------------------------X-AXIS AND UPHILL SLOPE COLLISIONS


// If on collision course with the wall...
if (place_meeting(x + v_x, y, obj_wall)) {

    // the variable for the number of pixels "up" character can climb
    yplus = 0;  
    
    /* While there is a collision some x, y ahead and above of player.
     * Checks how many pixels in y direction there are until there is no collision.
     * Example: if there are 5 pixels in the y for collision, yplus = 5 and while loop breaks.
     * Eventually, yplus &gt; abs(some number). Therefore, abs(some number) states how many pixels
     * in the y direction the player can climb. 
     * Here, some number = 1 * v_x. Player can only go up inclines as much as his xVelocity.
     */
    while (place_meeting(x + v_x, y - yplus, obj_wall) &amp;&amp; yplus &lt;= slopeScanValue) {
        yplus += 1;
    }
        
    // Uses new yplus, if there is a collision... (means one of the two conditions above returned false).   
    if (place_meeting(x + v_x, y - yplus, obj_wall)) {
    
        // While you haven't collided yet...
        while(!place_meeting(x + sign(v_x), y, obj_wall)) {
        
                // Move one pixel right or left.
                x += sign(v_x);
        }
        // When you collide, set v_x = 0.
        v_x = 0;
    }
    else {
        y -= yplus;
    }
}
x += v_x; // Check for collisions first, then update x.


//------------------------------------------------Y-AXIS COLLISIONS


if (place_meeting(x, y + v_y, obj_wall)) {

// While you haven't collided yet...
    while(!place_meeting(x, y + sign(v_y), obj_wall)) {
    
    // Move one pixel up or down.
        y += sign(v_y);
    }
    
    // When you collide, set v_y = 0.
    v_y = 0;
}
y += v_y;


//------------------------------------------------GOING DOWN SLOPES


yminus = 0;
while (!place_meeting(x + v_x, y + yminus, obj_wall) &amp;&amp; yminus &lt;= slopeScanValue) {
    yminus += 1;
}
    
if (place_meeting(x + v_x, y + yminus, obj_wall)) {
    grounded = true;
    y += yminus;
}
else {
    grounded = false;
}


//------------------------------------------------GRAVITY AND GROUNDED BOOLEAN


// If one pixel above ground, v_y = 0. If space is pressed, jump.
if (place_meeting(x, y + 1, obj_wall)) {
    v_y = 0;
    grounded = true;
}
else { // Else, gravity pulls you down (falling is assumed).
    v_y += g;
    grounded = false; // Can't jump when not grounded.
}
  
  
/*----------------------------------------------------------------------------------------------------------
   ___  ____      _ _____ ____ _____   ___ _   _ _____ _____ ____      _    ____ _____ ___ ___  _   _ ____  
  / _ \| __ )    | | ____/ ___|_   _| |_ _| \ | |_   _| ____|  _ \    / \  / ___|_   _|_ _/ _ \| \ | / ___| 
 | | | |  _ \ _  | |  _|| |     | |    | ||  \| | | | |  _| | |_) |  / _ \| |     | |  | | | | |  \| \___ \ 
 | |_| | |_) | |_| | |__| |___  | |    | || |\  | | | | |___|  _ &lt;  / ___ \ |___  | |  | | |_| | |\  |___) |
  \___/|____/ \___/|_____\____| |_|   |___|_| \_| |_| |_____|_| \_\/_/   \_\____| |_| |___\___/|_| \_|____/ 
  
----------------------------------------------------------------------------------------------------------*/


//------------------------------------------------HIDING

if (grounded 
    &amp;&amp; place_meeting(x, y, obj_crate) // if your colliding with the crate
    &amp;&amp; keyboard_check(vk_down)) { // and down is pressed
                hidden = true;
}   
else {
    hidden = false;
}

//------------------------------------------------GRABBING ON GRAB WALLS


if(place_meeting(x + 1, y, obj_grabBlock) 
                &amp;&amp; keyboard_check(vk_control) 
                &amp;&amp; grounded) {
    grabbing = true;
} else {
    grabbing = false;
}

/* Same code but for the left side. 
 * Since sign(x) can return 0 it can't be used for grabs.
 */
 
if(place_meeting(x - 1, y, obj_grabBlock)
                &amp;&amp; keyboard_check(vk_control) 
                &amp;&amp; grounded) {
    grabbing = true;
} else {
    grabbing = false;
}

// if you're grabbing you can't go left, right, up or down.
if (grabbing) {
    v_y = 0;
    v_x = 0;
    grounded = true;
    x = xprevious;
    y = yprevious;
}

// resets grabbing if you're not holding grab
if (!keyboard_check(vk_control)) {
    grabbing = false;
}


//------------------------------------------------SLOPE CHANGES RUNNING SPEED AND FRIC


if (place_meeting(x, y + 1, obj_slopeWall2)) {
    maxRunningSpeed = 5;
    
    // if already going faster than the new speed limit bring it down.
    if (v_x &gt; maxRunningSpeed) {
        v_x -= fric;
    }
    if (v_x &lt; -maxRunningSpeed) {
        v_x += fric;
    }
} else {
    maxRunningSpeed = 10;
}


//------------------------------------------------LADDERS   

 
/****LADDERS****/
/*
if(place_meeting(x, y, obj_ladder)) {
    if (keyboard_check(vk_up)) {
        g = -2;
    } else g = 2;
    if (keyboard_check(vk_down)) {
        g = 2;
    } else g = 2;
}
*/


/*----------------------------------------
  ____  ____  ____  ___ _____ _____ ____  
 / ___||  _ \|  _ \|_ _|_   _| ____/ ___| 
 \___ \| |_) | |_) || |  | | |  _| \___ \ 
  ___) |  __/|  _ &lt; | |  | | | |___ ___) |
 |____/|_|   |_| \_\___| |_| |_____|____/

----------------------------------------*/

if (grounded) { // sprites when grounded

    if (runButton &amp;&amp; (right || left)) {
    
        /** if the sprite isn't the running sprite set index to zero so when 
          * it becomes the running sprite, it always starts on frame 0 */
        if (sprite_index != spr_running) {  
            image_index = 0;
        }
        
        sprite_index = spr_running;
        image_speed = 3;
    }
    else if ((left || right)) { // if no horizontal speed
    
        if (sprite_index != spr_walking) { // same as before
            image_index = 0;
        }
        
        sprite_index = spr_walking;
        image_speed = 4;
    }
    else { // if none of the above, then make player idle.
        sprite_index = spr_idle;
        image_speed = 2;
    }
    
    if (rightAndLeftPressed) { //both pressed
        sprite_index = spr_idle;
        image_speed = 1;
    }
}


else { // if not grounded...

    if (v_y &gt; 0) {
        if (sprite_index != spr_falling) {
            image_index = 0;
        }
        
    sprite_index = spr_falling; // this has a script in "animation end" to avoid looping
    image_speed = 0.5;
    }
    
    if (v_y &lt; 0) {
        sprite_index = spr_idle;
        image_speed  = 1;
    }
}


/*------------------------------------------------
  _____ _____ ____ _____    ____ ___  ____  _____ 
 |_   _| ____/ ___|_   _|  / ___/ _ \|  _ \| ____|
   | | |  _| \___ \ | |   | |  | | | | | | |  _|  
   | | | |___ ___) || |   | |__| |_| | |_| | |___ 
   |_| |_____|____/ |_|    \____\___/|____/|_____|
                                                
------------------------------------------------*/

if (keyboard_check(vk_enter)) {
    room_restart();
}







    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_nextroom">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>-100</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_hide) { // if this sprite is active
    image_index = 14; // set frame speed to 0 at frame 19 (last frame)
    image_speed = 0;
    }

if (sprite_index == spr_falling) {
    image_index = 24;
    image_speed = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,74</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
